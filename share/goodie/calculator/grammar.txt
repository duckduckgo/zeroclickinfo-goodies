:default ::= action => [value] bless => ::lhs
lexeme default = action => [ start, length, value ]
    bless => ::name latm => 1

:start ::= Calculator

Calculator ::= Expression

Expression ::=
       Term   bless => primary
    || ExprOp bless => primary

Term ::=
       Function               bless => primary
    |  ('(') Expression (')') bless => paren assoc => group
    |  Factor                 bless => primary
    || TermOp                 bless => primary

TermOp ::=
       Expression ('^') Expression    bless => exponentiate assoc => right
    || Factor ('squared')             bless => square
    || Expression ('*') Expression    bless => multiply
    |  Expression ('/') Expression    bless => divide
    |  Term ('divided') ('by') Factor bless => divide

ExprOp ::=
      Expression ('+') Term bless => add
    | Expression ('-') Term bless => subtract

Factor ::=
       NumTerm                 bless => primary
    || NumTerm ('e':i) NumTerm bless => exp

NumTerm ::=
       Number Constant bless => constant_coefficient
    || Constant        bless => primary
    |  Number          bless => primary

Constant ::=
      pi    bless => const_pi
    | euler bless => const_euler
    | dozen bless => const_dozen
    | score bless => const_score

pi    ~ 'pi':i
euler ~ 'e':i
dozen ~ 'dozen':i
score ~ 'score':i

Function ::=
      ('sqrt' )         Argument bless => square_root
    | ('sin'  )         Argument bless => sine
    | ('cos'  )         Argument bless => cosine
    | ('tan'  )         Argument bless => tangent
    | ('csc'  )         Argument bless => cosec
    | ('sec'  )         Argument bless => secant
    | ('cotan')         Argument bless => cotangent
    | ('log_' ) NumTerm Argument bless => logarithm
    | ('log'  ) NumTerm Argument bless => logarithm
    | ('ln'   )         Argument bless => natural_logarithm
    | ('log'  )         Argument bless => natural_logarithm
    | ('fact' )         Argument bless => factorial
    | ('factorial')     Argument bless => factorial

# Argument for a unary function.
Argument ::= ('(') Expression (')') bless => primary

Number ::=
      [$] BaseNumber bless => prefix_currency
    |     BaseNumber bless => primary

BaseNumber ::=
      Integer bless => integer
    | Decimal bless => decimal

Integer ~    '-' digits     | digits
Decimal ~    '-' digits '.'   digits | digits '.' digits
           | '.' digits     | digits '.'
           | '-' digits '.'

digits     ~ [\d]+

:discard   ~ whitespace
whitespace ~ [\s]+
