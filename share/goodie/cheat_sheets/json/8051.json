{
    "id": "8051_cheat_sheet",
    "name": "8051",
    "description": "basic instruction sets of 8051 MicroController",

    "metadata": {
        "sourceName": "Keil",
        "sourceUrl" : "http://www.keil.com/support/man/docs/is51/is51_instructions.htm"
    },

    "aliases": [
        "8051 cheat sheet", "8051 intructions", "8051 opcode"
    ],

    "template_type": "reference",

    "section_order": [
        "Instructions(A-D)",
        "Instructions(I-O)",
        "Instructions(P-X)"
        
    ],

    "sections": {
        "Instructions(A-D)": [
            {
                "key": "ACALL",
                "val": "The ACALL instruction calls a subroutine located at the specified address. (ACALL LABEL) "
            },
            {
                "key": "ADD",
                "val": "he ADD instruction adds a byte value to the accumulator and stores the results back in the accumulator.(ADD A, @R1)"
            },
            {
                "key": "ADDC",
                "val": "The ADDC instruction adds a byte value and the value of the carry flag to the accumulator(ADDC A, @R0)"
            },
            {
                "key": "AJMP",
                "val": "The AJMP instruction transfers program execution to the specified address(AJMP LABEL)"
            },
            {
                "key": "ANL",
                "val": "The ANL instruction performs a bitwise logical AND operation between the specified byte or bit operands and stores the result in the destination operand(ANL A, @R0)"
            },
            {
                "key": "CJNE",
                "val": "The CJNE instruction compares the first two operands and branches to the specified destination if their values are not equal(CJNE @R1, #24H, LABEL)"
            },
            {
                "key": "CLR",
                "val": "The CLR instruction sets the specified destination operand to a value of 0(CLR A)"
            },
            {
                "key": "CPL",
                "val": "The CPL instruction logically complements the value of the specified destination operand and stores the result back in the destination operand(CPL A)"
            },
            {
                "key": "DA",
                "val": "The DA instruction adjusts the eight-bit value in the Accumulator resulting from the earlier addition of two variables(DA A)"
            },
            {
                "key": "DEC",
                "val": "The DEC instruction decrements the specified operand by 1(DEC @R1)"
            },
            {
                "key": "DIV",
                "val": "The DIV instuction divides the unsigned 8-bit integer in the accumulator by the unsigned 8-bit integer in register B(DIV AB)"
            },
            {
                "key": "DJNZ",
                "val": "The DJNZ instruction decrements the byte indicated by the first operand and, if the resulting value is not zero, branches to the address specified in the second operand(DJNZ 40h, LABEL)"
            }
            ]
         "Instructions(I-O)" :[    
            {
                "key": "INC",
                "val": "The INC instruction increments the specified operand by 1(INC @R0)"
            },
            {
                "key": "JB",
                "val": "The JB instruction branches to the address specified in the second operand if the value of the bit specified in the first operand is 1(JB P1.2 LABEL)"
            },
            {
                "key": "JBC",
                "val": "The JBC instruction branches to the address specified in the second operand if the value of the bit specified in the first operand is 1(JBC 44h)"
            },
            {
                "key": "JC",
                "val": "The JC instruction branches to the specified address if the carry flag is set(JC LABEL)"
            },
            {
                "key": "JMP",
                "val": "The JMP instruction transfers execution to the address generated by adding the 8-bit value in the accumulator to the 16-bit value in the DPTR register(JMP @A+DPTR)"
            },
            {
                "key": "JNB",
                "val": "The JNB instruction branches to the specified address if the specified bit operand has a value of 0(JNB P1.3, LABEL)"
            },
            {
                "key": "JNC",
                "val": "The JNC instruction transfers program control to the specified address if the carry flag is 0(JNC LABEL)"
            },
            {
                "key": "JNZ",
                "val": "The JNZ instruction transfers control to the specified address if the value in the accumulator is not 0(JNZ LABEL)"
            },
            {
                "key": "JZ",
                "val": "The JZ instruction transfers control to the specified address if the value in the accumulator is 0(JZ LABEL)"
            },
            {
                "key": "LCALL",
                "val": "The LCALL instruction calls a subroutine located at the specified address(LCALL SUB1)"
            },
            {
                "key": "LJMP",
                "val": "The LJMP instruction transfers program execution to the specified 16-bit address(LJMP LABEL)"
            },
            {
                "key": "MOV",
                "val": "The MOV instruction moves data bytes between the two specified operands(MOV @R0, #0)"
            },
            {
                "key": "MOVC",
                "val": "The MOVC instruction moves a byte from the code or program memory to the accumulator(MOVC A, @A+DPTR)"
            },
             {
                "key": "MOVX",
                "val": "The MOVX instruction transfers data between the accumulator and external data memory(MOVX @R0, A)"
            },
             {
                "key": "MUL",
                "val": "The MUL instruction multiplies the unsigned 8-bit integer in the accumulator and the unsigned 8-bit integer in the B register producing a 16-bit product(MUL AB)"
            },
            
             {
                "key": "NOP",
                "val": "The NOP instruction does no operation(NOP)"
            },
             {
                "key": "ORL",
                "val": "The ORL instruction performs a bitwise logical OR operation on the specified operands, the result of which is stored in the destination operand(ORL A, #01h)"
            }
            ]
        "Instructions(P-X)" : [   
            
             {
                "key": "POP",
                "val": "The POP instruction reads a byte from the address indirectly referenced by the SP register(POP 34h)"
            },
            
             {
                "key": "PUSH",
                "val": "The PUSH instruction increments the stack pointer and stores the value of the specified byte operand at the internal RAM address indirectly referenced by the stack pointer(PUSH A)"
            },
             {
                "key": "RET",
                "val": "The RET instruction pops the high-order and low-order bytes of the PC from the stack (and decrements the stack pointer by 2)(RET)"
            },
             {
                "key": "RETI",
                "val": "The RETI instruction is used to end an interrupt service routine(RETI)"
            },
             {
                "key": "RL",
                "val": "The RL instruction rotates the eight bits in the accumulator left one bit position(RL A)"
            },
             {
                "key": "RLC",
                "val": "The RLC instruction rotates the eight bits in the accumulator and the one bit in the carry flag left one bit position(RLC A)"
            },
             {
                "key": "RR",
                "val": "The RR instruction rotates the eight bits in the accumulator right one bit position(RR A)"
            },
             {
                "key": "RRC",
                "val": "The RRC instruction rotates the eight bits in the accumulator and the one bit in the carry flag right one bit position(RRC A)"
            },
             {
                "key": "SETB",
                "val": "The SETB instruction sets the bit operand to a value of 1(SETB 63h)"
            },
             {
                "key": "SJMP",
                "val": "The SJMP instruction transfers execution to the specified address(SJMP LABEL)"
            },
             {
                "key": "SUBB",
                "val": "The SUBB instruction subtracts the specified byte variable and the carry flag from the accumulator(SUBB A, #01h)"
            },
             {
                "key": "SWAP",
                "val": "The SWAP instruction exchanges the low-order and high-order nibbles within the accumulator(SWAP A)"
            },
             {
                "key": "XCH",
                "val": "The XCH instruction loads the accumulator with the byte value of the specified operand while simultaneously storing the previous contents of the accumulator in the specified operand(XCH A, @R0)"
            },
             {
                "key": "XCHD",
                "val": "The XCHD instruction exchanges the low-order nibble of the accumulator with the low-order nibble of the specified internal RAM location(XCHD A, @R1)"
            },
             {
                "key": "XRL",
                "val": "The XRL instruction performs a logical exclusive OR operation between the specified operands(XRL A, #0FFh)"
            }
             
        ]
    }
}
