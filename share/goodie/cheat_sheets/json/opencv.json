{
    "id": "opencv_cheat_sheet",
    "name": "OpenCV 2.4",
    "description": "OpenCV 2.4 Cheat Sheet",
    "metadata": {
        "sourceName": "opencv.org",
        "sourceUrl": "http://www.opencv.org"
    },
    "template_type": "reference",
    "section_order": [
        "Key Classes",
        "Geometrical Transformations",
        "Image Transformations",
        "Histograms",
        "Matrix Manipulations",
        "Filtering",
        "Simple GUI",
        "Camera",
        "Object Detection"
    ],
    "sections": {
        "Key Classes": [{
            "key":"Point_",
            "val":"Template 2D Point Class"
          }, {
            "key":"Point3_",
            "val":"Template 3D Point Class"
          }, {
            "key":"Size_",
            "val":"Template Size Class"
          }, {
            "key":"Vec",
            "val":"Template Short Vector Class"
          },
              {
             "key":"Matx",
             "val":"Template Small Matrix Class"
          },
              {
            "key":"Range",
            "val":"Integer Value Range"
          }, {
            "key":"SparseMat",
            "val":"Multidimensional Sparse Array"
          }, {
            "key":"Ptr",
            "val":"Template Smart Pointer Class"
        }],
        "Geometrical Transformations": [{
            "key":"resize()",
            "val":"Resize Image"
          }, {
            "key":"getRectSubPix()",
            "val":"Extract image patch"
          }, {
            "key":"warpAffine()",
            "val":"Warp image affinely"
          }, {
            "key":"warpPerspective()",
            "val":"Warp image perspectively"
          }, {
            "key":"remap())",
            "val":"Generic image warping"
          }, {
            "key":"convertMaps()",
            "val":"Optimise images for faster remap()"
          }],

        "Image Transformations": [{
            "key":"cvtColor()",
            "val":"Convert image to different color space"
          }, {
            "key":"threshold()",
            "val":"Convert greyscale image to binary image"
          }, {
            "key":"integral()",
            "value":"Compute integral image"

          },  {
            "key":"distanceTransform()",
            "value":"Build distance map"
          }, {
            "key":"watershed()",
            "value":"[Marker based image segmentation]"
          }
        ],
        "Histograms": [{
            "key":"calcHist()",
            "val":"Compute image histogram"
          }, {
            "key":"calcBackProject()",
            "val":"Back project the histogram"
          }, {
            "key":"equalizeHist()",
            "value":"Normalize brightness and contrast"

          },  {
            "key":"compareHist()",
            "value":"Compare two histograms"
          }],
        "Matrix Manipulations": [{
            "key":"src.copyTo(dst)",
            "val":"Copy matrix to another one"
          }, {
            "key":"m.clone()",
            "val":"Make deep copy of matrix"
          }, {
            "key":"m.row(i)",
            "value":"Take a matrix row"
          }, {
            "key":"m.col(i)",
            "value":"Take a matrix column"
          },  {
            "key":"m.diag(i)",
            "value":"Take a matrix diagonal"
          },  {
            "key":"m.repeat(ny,nx)",
            "value":"Make a bigger matrix from smaller one"
          },  {
            "key":"split(...)",
            "value":"Split multi channel matrix into seperate channels"
          },  {
            "key":"merge(...))",
            "value":"Make a multi channel matrix from seperate channels"
          }],
           "Filtering": [{
               "key":"filter2D()",
               "val":"Non-seperable linear filter"
             }, {
               "key":"sepFilter2D()",
               "val":"Sperable linear filter"
             }, {
               "key":"Sobel()",
               "value":"Compute spatial image derivative"
             },  {
               "key":"Laplacian()",
               "value":"Compute Laplacian"
             },  {
               "key":"erode()",
               "value":"Morphological Operation"
             }],

        "Simple GUI": [{
            "key":"namedWindow(winname,flags)",
            "val":"Create named highgui window"
          }, {
            "key":"destroyWindow(winname)",
            "val":"Destroy specified window"
          }, {
            "key":"imshow(winname,mtx)",
            "value":"Show image in window"
          },  {
            "key":"waitKey(delay)",
            "value":"Wait for key press"
          },  {
            "key":"createTrackbar(...)",
            "value":"Add tracbar to specified window"
          },  {
            "key":"setMouseCallback(...)",
            "value":"Set callback on ouse clicks"
          }],
           "Camera": [{
               "key":"calibrateCamera()",
               "val":"Calibrate camera from several views"
             }, {
               "key":"solvePnP()",
               "val":"Find object pose from known projections"
             }, {
               "key":"stereoCalibrate()",
               "value":"Calibrate stereo camera"
             },  {
               "key":"stereoRectify()",
               "value":"Compute rectification transforms"
             },  {
               "key":"reprojectImageTo3D()",
               "value":"Convert disply map to 3D image cloud"
             },  {
               "key":"findHomography()",
               "value":"Find best fit perspective transform"
             }],
              "Object Detection": [{
                  "key":"matchTemplate",
                  "val":"Compute proximity map for given template"
                }, {
                  "key":"CascadeClassifier",
                  "val":"Suits for detecting facial features and some other obects"
                }, {
                  "key":"HOGDescriptor",
                  "value":"Dalal's object detector using Histogram-of-Oriented-Gradients"
                }]
    }
}
