{
    "id": "intel_8086_cheat_sheet",
    "name": "Intel 8086 Instruction Set",
    "description": "8086 instructions and their explanations",
    "metadata": {
        "sourceName": "utcluj",
        "sourceUrl": "http://users.utcluj.ro/~elupu/Curs/fileloader.php?fileName=upload/Cursuri/Univ.Nord_BM1/Curs_5/8086_instruction_set.pdf"
    },
    "template_type": "reference",
    "section_order": [
        "Data Transfer Instructions",
        "Arithmetic Instructions",
        "Logical Instructions",
        "Rotate and Shift Instructions",
        "Control Transfer Instructions",
        "Flag Manipulation Instructions"
    ],
    "aliases": [
        "8086",
        "8086 instructionset",
        "8086 instruction set",
        "8086 programming",
        "8086 instructions"
    ],
    "sections": {
        "Data Transfer Instructions": [
            {
                "key": "MOV Destination, Source",
                "val": "Copies a word or byte of data from 'source' to 'destination'"
            },
            {
                "key": "XCHG Destination, Source",
                "val": "Exchanges the content of 'source' and 'destination'"
            },
            {
                "key": "LEA Register, Source",
                "val": "Stores the offset of the variable or memory location named as the 'source'  into the 16-bit register"
            },
            {
                "key": "LDS - LDS Register, Memory address of the first word",
                "val": "This instruction loads new values into the specified register and into the DS register from four successive memory locations."
            },
            {
                "key": "LES - LES Register, Memory address of the first word",
                "val": "This instruction loads new values into the specified register and into the ES register from four successive memory locations"
            }
        ],
        "Arithmetic Instructions": [
            {
                "key": "ADD Destination, Source",
                "val": "Adds the number in 'source' to the number in 'destination' and put the result in the 'destination'"
            },
            {
                "key": "SUB Destination, Source",
                "val": "Subtracts the number in 'source' from the number in 'destination' and put the result in the 'destination'"
            },
            {
                "key": "MUL Source",
                "val": "Multiplies an unsigned byte in the 'source' with an unsigned byte in AL register or an unsigned word in the 'source' with an unsigned word in AX register"
            },
            {
                "key": "DIV Source",
                "val": "Divide an unsigned word by a byte in the 'source' or to divide an unsigned double word by a word in the 'source'"
            },
            {
                "key": "INC Destination",
                "val": "Increments the content of 'destination' by one"
            },
            {
                "key": "DEC Destination",
                "val": "Decrements the content of 'destination' by one"
            },
            {
                "key": "DAA",
                "val": "Decimal adjust after BCD addition"
            },
            {
                "key": "AAA",
                "val": "ASCII adjust for addition"
            }
        ],
        "Logical Instructions": [
            {
                "key": "AND Destination, Source",
                "val": "ANDs each bit in the 'source' byte or word with the same numbered bit in a 'destination' byte or word"
            },
            {
                "key": "OR Destination, Source",
                "val": "ORs each bit in a 'source' byte or word with the same numbered bit in a 'destination' byte or word"
            },
            {
                "key": "XOR Destination, Source",
                "val": "Exclusive-ORs each bit in a 'source' byte or word with the same numbered bit in a 'destination' byte or word"
            },
            {
                "key": "NOT Destinations",
                "val": "Inverts each bit (1â€™s complement) of a byte or word in the 'destination'"
            },
            {
                "key": "CMP Destination, Source",
                "val": "Compares a byte / word in the 'source' with a byte / word in the 'destination'"
            },
            {
                "key": "TEST Destination, Source",
                "val": "ANDs the byte / word in the 'source' with the byte / word in the 'destination'"
            }
        ],
        "Rotate and Shift Instructions": [
            {
                "key": "RCL Destination, Count",
                "val": "Rotates all the bits in a word or byte  in the 'destination' to the left 'count' number of times through carry flag"
            },
            {
                "key": "RCR Destination, Count",
                "val": "Rotates all the bits in a word or byte  in the 'destination' to the right 'count' number of times through carry flag"
            },
            {
                "key": "ROL Destination, Count",
                "val": "Rotates all the bits in a word or byte  in the 'destination' to the left 'count' number of times. MSB is circled back into the LSB and CF contains a copy of the bit most recently moved out of the MSB"
            },
            {
                "key": "ROR Destination, Count",
                "val": "Rotates all the bits in a word or byte  in the 'destination' to the right 'count' number of times. LSB is circled back into the LSB and CF contains a copy of the bit most recently moved out of the LSB"
            },
            {
                "key": "SHL Destination, Count",
                "val": "Shifts each bit in the 'destination' to the left 'count' number of times and  a 0 is put in the LSB position for each shift"
            },
            {
                "key": "SHR Destination, Count",
                "val": "Shifts each bit in the 'destination' to the right 'count' number of times and  a 0 is put in the MSB position for each shift"
            }
        ],
        "Control Transfer Instructions": [
            {
                "key": "JMP Destination",
                "val": "Unconditional jump to the specified 'destination'"
            },
            {
                "key": "JC Destination",
                "val": "Jump to the specified 'destination' if carry flag is set"
            },
            {
                "key": "JZ Destination",
                "val": "Jump to the specified 'destination' if zero flag is set"
            },
            {
                "key": "JS",
                "val": "Jump to the specified 'destination' if sign flag is set"
            },
            {
                "key": "LOOP",
                "val": "Repeat a series of instructions some number of times. The number of times is loaded into CX"
            },
            {
                "key": "CALL",
                "val": "Transfer control to a subprogram or a procedure"
            }
        ],
        "Flag Manipulation Instructions": [
            {
                "key": "STC",
                "val": "Sets Carry Flag"
            },
            {
                "key": "CLC",
                "val": "Clear Carry Flag"
            },
            {
                "key": "CMC",
                "val": "Complement Carry Flag"
            },
            {
                "key": "STD",
                "val": "Sets Direction Flag"
            },
            {
                "key": "CLD",
                "val": "Clear Direction Flag"
            },
            {
                "key": "STI",
                "val": "Sets Interrupt Flag"
            },
            {
                "key": "CLI",
                "val": "Clear Interrupt Flag"
            }
        ]
    }
}
