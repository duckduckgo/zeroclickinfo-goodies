{
    "id": "regex_security_cheat_sheet",
    "name": "Regex Security",
    "description": "A list of common security issues generally faced when using Regex in softwares which might invalidate data.",

    "metadata": {
        "sourceUrl": "https://code.tutsplus.com/tutorials/advanced-regular-expression-tips-and-techniques",
        "sourceName": "Regex Security for web application firewalls"   
    },

    "aliases": [
        "regexp security"
    ],

    "template_type": "code",

    "section_order": [
        "High Severity Issues",
        "Medium Severity Issues"
    ],

    "sections": {
        "High Severity Issues": [
            {
                "key": "`(^a|a$)`",
                "val": "Regexp should avoid using `^` (alternative: `\\A`) and `$` (alternative: `\\Z`) symbols, which are metacharacters for start and end of a string. It is possible to bypass regex by inserting any symbol in front or after regexp"
            },
            {
                "key": "`http`",
                "val": "Regexp should be case-insensitive: `(?i:` or `//regex//i`. It is possible to bypass regex using upper or lower cases in words. [Modsecurity transformation commands](https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#cmdLine) (which are applied on string before regex pattern is applied) can also be included in tests to cover more regexps"
            },
            {
                "key": "`a.*b`",
                "value": "In case modifier `//m` is not (globally) specified, regexp should avoid using dot `.` symbol, which means every symbol except newline (`\n`). It is possible to bypass regex using [newline injection](https://www.htbridge.com/blog/bypassing-bitrix-web-application-firewall-via-tiny-regexp-error.html)"
            },
            {
                "key": "`(a+)+`",
                "value": "Regexp should not be vulnerable to ReDoS. [OWASP ReDoS article](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS) 1. Find various evil patterns.  2. Generate evil string using e.g. “SDL Regex Fuzzer”"
            },
            {
                "key": "`a{1,5}`",
                "value": "Number of repetitions of set or group `{}` should be carefully used, as one can bypass such limitation by lowering or increasing specified numbers"
            },
            {
                "key": "``[A-z] = [a-zA-Z] + [\\]^_` ``",
                "value": "Nonstandard ranges (almost everything except a-z, 0-9, a-f, etc)"
            },
            {
                "key": "`a'\\s+\\d`",
                "value": "Regexp should only use plus “`+`” metacharacter in places where it is necessary, as it means “one or more”. Alternative metacharacter star “`*`”, which means “zero or more” is generally preferred"
            },
            {
                "key": "`a\\s(not[whitespace]|and)\\sb`",
                "value": "Regular expression writers should be careful while using only whitespace character (`%20`) as separators. Rule can be bypassed e.g. with newline character, tabulation, by skipping whitespace, or alternatives"
            },
            {
                "key": "`a||b`",
                "value": "Nonstandard combinations of operators"
            },
            {
                "key": "`(a |b)c`",
                "value": "Special cases: whitespaces before operators"
            },
            {
                "key": "`a[digit]b`",
                "value": "Usage of wrong syntax in POSIX character classes"
            },
            {
                "key": "`[SYSTEM|PUBLIC]` or `(a-z123)`",
                "value": "Opposite usage of brackets [], () and {}"
            }
        ],
        "Medium Severity Issues": [
            {
                "key": "`a(?#some comment about wildcards:\\)(\\w*)b`1",
                "val": "Unsafe usage of comments"
            },
            {
                "key": "`[\\w+]`",
                "val": "Excessive usage of metacharacters in []"
            },
            {
                "key": "`\\a = 0x07; \\e = 0x1B; \\R = \\r|\n|\\r\\n; \\xXX = 0xXX; \\ddd = 0oddd; \\cX, \\x{XXXX}, \\H, \\V, \\G`",
                "value": " Rarely used [wildcards](http://php.net/manual/en/regexp.reference.escape.php). All wildcards except popular: A,Z,b,r,n,t,wW,sS,dD,u,x"
            },
            {
                "key": "`(?R`, `(?(id)true|false)`, ...",
                "value": "Unsafe usage of [recursion](http://php.net/manual/ru/regexp.reference.recursive.php), IF statements, etc"
            },
            {
                "key": "`[\\0-9]` = `\\0\\1\\2\\3...$%&'...789`",
                "value": "Unsafe usage of ranges"
            }
        ]
    }
}
