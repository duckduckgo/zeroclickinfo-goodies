{
  "id": "swift_cheat_sheet",
  "name": "Swift",
  "description": "A quick reference of Apple's Swift language, a multi-paradigm, compiled programming language",
  "template_type": "terminal",
  "aliases":["apple swift","swift language"],
  "metadata": {
    "sourceName": "GitHub",
    "sourceUrl": "http://kpbp.github.io/swiftcheatsheet/"
  },
  "section_order": [
    "Basics",
    "Logical Operators",
    "Arithmatic Operators",
    "Comparison Operators",
    "Printing",
    "Dictionaries",
    "Arrays",
    "Conditionals",
    "Loops",
    "Functions",
    "Classes",
    "Methods",
    "Instances",
    "Enums"
  ],
  "sections": {
    "Basics": [
      {
        "key": "var myInt",
        "val": "Declare a new variable"
      },
      {
        "key": "let myInt = 1",
        "val": "Declare a new constant"
      },
      {
        "key": "var myString",
        "val": "Declare a new string"
      },
      {
        "key": "var colors = \\[\"red\", \"blue\"\\]",
        "val": "Declares a new string array"
      }
    ],
    "Logical Operators": [
      {
        "key": "&&",
        "val": "AND"
      },
      {
        "key": "||",
        "val": "OR"
      },
      {
        "key": "!=",
        "val": "Not equals"
      },
      {
        "key": "==",
        "val": "Equals"
      }
    ],
    "Arithmatic Operators": [
      {
        "key": "+",
        "val": "Addition"
      },
      {
        "key": "-",
        "val": "Subtraction"
      },
      {
        "key": "*",
        "val": "Multiplication"
      },
      {
        "key": "/",
        "val": "Division"
      },
      {
        "key": "%",
        "val": "Modulus"
      },
      {
        "key": "+=1",
        "val": "Increment by 1"
      },
      {
        "key": "-=1",
        "val": "Decrement by 1"
      }
    ],
    "Comparison Operators": [
      {
        "key": "==",
        "val": "Equal to"
      },
      {
        "key": "!=",
        "val": "Not equal to"
      },
      {
        "key": ">",
        "val": "Greater than"
      },
      {
        "key": "<",
        "val": "Less than"
      },
      {
        "key": ">=",
        "val": "Greater than or equal to"
      },
      {
        "key": "<=",
        "val": "Less than or equal to"
      }
    ],
    "Printing": [
      {
        "key": "print(\"Hi\")",
        "val": "Prints Hi"
      }
    ],
    "Dictionaries": [
      {
        "key": "var days = \\[\"mon\": \"monday\", \"tue\": \"tuseday\"\\]",
        "val": "Declare a new dictionary"
      },
      {
        "key": "days\\[\"tue\"\\] = \"tuesday\"",
        "val": "Change the value for key \"tue\""
      },
      {
        "key": "days.removeValueForKey(\"mon\")",
        "val": "Remove \"mon\" from the dictionary"
      },
      {
        "key": "days\\[\"tue\"\\] = nil",
        "val": "Remove \"tue\" from the dictionary"
      }
    ],

    "Arrays": [
      {
        "key": "var someInts = \\[Int\\]()",
        "val": "Creating an Empty Array"
      },
      {
        "key": "var threeDoubles = \\[Double\\](count: 3, repeatedValue: 0.0)",
        "val": "Creating an Array with a Default Value"
      },
      {
        "key": "var shoppingList: \\[String\\] = \\[\"Eggs\", \"Milk\"\\]",
        "val": "Creating an Array with an Array Literal"
      },
      {
        "key": "for item in shoppingList \\{\nprint(item)\n\\}",
        "val": "Iterating Over an Array"
      }
    ],
    "Conditionals": [
      {
        "key": "if condition \\{\n//statements\n\\}",
        "val": "If statement"
      },
      {
        "key": "if condition \\{\n//statements \n\\} else \\{\nstatements\n\\}",
        "val": "If...Else statement"
      },
      {
        "key": "switch control expression \\{case pattern 1:   statements case pattern 2: statements default:    statements\\}",
        "val": "Switch"
      }
    ],
    "Loops": [
      {
        "key": "for var index = 1; index < n; ++index \\{\n//statements\n\\}",
        "val": "For loop"
      },
      {
        "key": "while count < n \\{//statements\\}",
        "val": "While Loop"
      }
    ],
    "Functions": [
      {
        "key": "func sayHello(personName: String) -> String \\{//statements\\}",
        "val": "Function definition"
      }
    ],
    "Classes": [
      {
        "key": "class SomeClass \\{\n// class definition\n\\}",
        "val": "Define a new class"
      }
    ],
    "Methods": [
      {
        "key": "func doIt() -> Int \\{\nreturn 0\n\\}\nfunc doIt(a:Int) -> Int \\{\nreturn a\n\\}\nfunc doIt(a:Int, b:Int) -> Int \\{\n return a+b\n\\}",
        "val": "Define a method"
      }
    ],
    "Instances": [
      {
        "key": "var a = MyClass()\na.myProperty",
        "val": "Creating/Using an Instance"
      }
    ],
    "Enums": [
      {
        "key": "enum CollisionType: Int \\{\ncase Player = 1\ncase Enemy = 2\n\\}\nvar type = CollisionType.Player",
        "val": "Define a new Enum"
      }
    ]
  }
}
