{
    "id": "cpp_vector_cheat_sheet",
    "name": "C++ Vector",
    "description": "C++ vectors are sequence containers representing arrays that can change in size.",

    "metadata": {
        "sourceName": "cplusplus.com",
        "sourceUrl" : "http://www.cplusplus.com/reference/vector/vector/"
    },

    "aliases": [
        "cpp vector",
        "c++ vector",
        "c++ vectors"
    ],

    "template_type": "terminal",

    "section_order": [
        "Iterators",
        "Capacity",
        "Element Access",
        "Modifiers",
        "Allocator"
    ],

    "sections": {
        "Iterators": [
            {
                "key": "myvector.begin()",
                "val": "Returns an iterator pointing to the first element in the vector."
            },
            {
                "key": "myvector.end()",
                "val": "Returns an iterator referring to the past-the-end element in the vector container."
            },
            {
                "key": "myvector.rbegin()",
                "val": "Returns a reverse iterator pointing to the last element in the vector."
            },
            {
                "key": "myvector.rend()",
                "val": "Returns a reverse iterator pointing to the theoretical element preceding the first element in the vector."
            },
            {
                "key": "myvector.cbegin()",
                "val": "Returns a const_iterator pointing to the first element in the container."
            },
            {
                "key": "myvector.cend()",
                "val": "Returns a const_iterator pointing to the past-the-end element in the container."
            },
            {
                "key": "myvector.crbegin()",
                "val": "Returns a const_reverse_iterator to the reverse beginning of the sequence."
            },
            {
                "key": "myvector.crend()",
                "val": "Returns a const_reverse_iterator pointing to the theoretical element preceding the first element in the container."
            }
        ],
        "Capacity": [
            {
                "key": "myvector.size()",
                "val": "Returns the number of elements in the vector"
            },
            {
                "key": "myvector.max_size()",
                "val": "Returns the maximum number of elements that the vector can hold"
            },
            {
                "key": "myvector.resize()",
                "val": "Resizes the container so that it contains n elements"
            }
            {
                "key": "myvector.capacity()",
                "val": "Returns the size of the storage space currently allocated for the vector."
            },
            {
                "key": "myvector.reserve()",
                "val": "Requests that the vector capacity be at least enough to contain n elements."
            },
            {
                "key": "myvector.shrink_to_fit()",
                "val": "Requests the container to reduce its capacity to fit its size."
            }
        ],
        "Element Access": [
            {
                "key": "mymap[i]",
                "val": "Returns a reference to the value that is mapped to a key equivalent to key, performing an insertion if such key does not already exist"
            },
            {
                "key": "mymap.at(k)",
                "val": "Returns a reference to the mapped value of the element identified with key k (C++11 only)"
            }
        ],
        "Modifiers": [
            {
                "key": "mymap.insert(std::pair<char,int>(k, v))",
                "val": "Inserts element(s) into the container, if the container doesn't already contain an element with an equivalent key"
            },
            {
                "key": "mymap.erase(it)",
                "val": "Removes from the map container either a single element or a range of elements"
            },
            {
                "key": "y.swap(x)",
                "val": "Exchanges the content of the container by the content of x, which is another map of the same type"
            },
            {
                "key": "mymap.clear()",
                "val": "Removes all elements from the map container (which are destroyed), leaving the container with a size of 0"
            },
            {
                "key": "mymap.emplace(k, v)",
                "val": "Inserts a new element in the map if its key is unique. This new element is constructed in place using args as the arguments for the construction of a value_type  (C++11 only)"
            },
            {
                "key": "mymap.emplace_hint(it, k, v)",
                "val": "Inserts a new element in the map if its key is unique, with a hint on the insertion position. This new element is constructed in place using args as the arguments for the construction of a value_type (C++11 only)"
            }
        ],
        "Observers": [
            {
                "key": "mymap.key_comp()",
                "val": "Returns a copy of the comparison object used by the container to compare keys"
            },
            {
                "key": "mymap.value_comp()",
                "val": "Returns a comparison object that can be used to compare two elements to get whether the key of the first one goes before the second"
            }
        ],
        "Operations": [
            {
                "key": "mymap.find(k)",
                "val": "Searches the container for an element with a key equivalent to k and returns an iterator to it if found, otherwise it returns an iterator to map::end"
            },
            {
                "key": "mymap.count(k)",
                "val": "Searches the container for elements with a key equivalent to k and returns the number of matches"
            },
            {
                "key": "mymap.lower_bound(k)",
                "val": "Returns an iterator pointing to the first element in the container whose key is not considered to go before k"
            },
            {
                "key": "mymap.upper_bound(k)",
                "val": "Returns an iterator pointing to the first element in the container whose key is considered to go after k"
            },
            {
                "key": "mymap.equal_range(k)",
                "val": "Returns the bounds of a range that includes all the elements in the container which have a key equivalent to k"
            }
        ],
        "Allocator": [
            {
                "key": "mymap.get_allocator()",
                "val": "Returns a copy of the allocator object associated with the map"
            }
        ]
    }
}