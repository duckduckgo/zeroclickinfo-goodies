{
    "id": "pearl_cheat_sheet",
    "name": "Pearl Language",
    "description": "This is a handy reference, meant for beginning Perl programmers. ",
    "metadata": {
        "sourceName": "The Realtime-Programming Language PEARL",
        "sourceUrl": "http://www.pearl90.de/pearleingb.htm"
    },
    "aliases": [
        "pearl programming",
        "pearl language"
    ],
    "template_type": "code",
    "section_order": [
        "In-Built Functions",
        "Operators and Loops ",
        "Matching and Regular Expression"

    ],
    "sections": {
        "In-Built Functions": [{
                "val": "Length of a string ",
                "key": "length($x)"
            },
            {
                "val": "Remove a newline at the end of a string ",
                "key": "chomp($line);"
            },
            {
                "val": "False if variable has never been set (or when you try to read past the end of an input file",
                "key": "while (defined ($x=<> {code}"
            },
            {
                "val": "Characters 3-7 of $long (first char is 0!) ",
                "key": "$short=substr ($long, 2, 5)"
            },
            {
                "val": "Add to end of array ",
                "key": "push @arr, $x"
            },
            {
                "val": "Remove last element of array, put in $x ",
                "key": "$x = pop @arr;"
            },
            {
                "val": "Remove first element of an arrray, put in $x",
                "key": "shift @arr;  (See also unshift)"
            },
            {
                "val": "Number of things in the array",
                "key": "$size = scalar @arr;"
            },
            {
                "val": "split string->array, join array->string,  delete part of array, sort array in many way",
                "key": "See also: split, join,  splice, sort  "
            },
            {
                "val": "The lookup terms in the hash ",
                "key": "@key = keys %hash"
            },
            {
                "val": "See whether hash %hh has a value for key Hsp",
                "key": "if (exists $hh{“Hsp”}) {...} "
            },
            {
                "val": "Open outfile for writing, and associate it with filehandle HANDLE. Use “<infile” for reading ",
                "key": "open(HANDLE, '>outfile') or die “Can’t open $outfile: $!\n' "
            },
            {
                "val": "Prints to standard output (screen), Print to filehandle HANDLE ",
                "key": "print $x; print HANDLE $x; "
            },
            {
                "val": "Prints to standard error (screen) ",
                "key": "warn “Something wrong\n”;"
            },
            {
                "val": "Read a line from filehandle HANDLE, put in $x ",
                "key": "$x=<HANDLE>"
            },
            {
                "val": "Stop reading/writing a previously opened file ",
                "key": "close(HANDLE);"
            },
            {
                "val": "Exits the program ",
                "key": "exit; "

            },
            {
                "val": "Exits the program with error message ",
                "key": "die 'Something broke!\n';  "

            }

        ],
        "Operators and Loops ": [{
                "val": "Sets variable to a value. Don’t confuse with ==, which tests whether numerical values are equal ",
                "key": "$x = 1"
            },
            {
                "val": "Regular math symbols ",
                "key": "print 1 * (2 + 3/4) "
            },
            {
                "val": "Modulus (remainder) operator ",
                "key": "10%3==1; 12%3==0"
            },
            {
                "val": "Same as $x=$x+4; Also -= *= /= ",
                "key": "$x += 4; "
            },
            {
                "val": "Same as $x=$x+1; ",
                "key": "$x++;"
            },
            {
                "val": "Are numbers equal? Don’t confuse with = or eq ",
                "key": "if (.1 == 0.1) {print “same num”"
            },
            {
                "val": "Are numbers different?",
                "key": "if (1 != 2) {print 'diff num'}"
            },
            {
                "val": "Are numbers greater than, less than, etc. ",
                "key": ">   <   >=   <="
            },
            {
                "val": "Does text have exactly the same letters? ",
                "key": "if (“a” eq “a”) {print “same text”} "
            },
            {
                "val": "Does text have different letters? ",
                "key": "if (“A” ne “a”) {print “diff text”}"
            },
            {
                "val": "Logical AND (true if both sides are true) ",
                "key": "if (($x > 1) && ($x < 2)) {code}"
            },
            {
                "val": "Logical OR (true if one or both sides are true) ",
                "key": "if (($x > 10) || ($x < -10)) {code}"
            },
            {
                "val": "Test for a match: See Matching cheat sheet ",
                "key": "=~   !~"
            },
            {
                "val": "Sets $i to 1 and does code. Sets $i to 2, … up to (and including) 100 ",
                "key": "foreach my $i (1 .. 100) {code} (for and foreach are equivalent) "
            },
            {
                "val": "Does code while the condition is true (If condition is false, never enters the loop.) ",
                "key": "while ($a < $b) {code}"
            }
        ],
        "Matching and Regular Expressions": [{
                "val": "Test For match",
                "key": "=~"
            },
            {
                "val": "Test for non-match",
                "key": "!~"
            },
            {
                "val": "Default variable",
                "key": "$_"
            },
            {
                "val": "Do a Substitution ",
                "key": "s///"
            },
            {
                "val": "Ignore case. ",
                "key": "i"
            },
            {
                "val": "Global substitution.",
                "key": "g"
            },
            {
                "val": "Any one character (except \n)",
                "key": "."
            },
            {
                "val": "Any one of.",
                "key": "[ ]"
            },
            {
                "val": "Digit (Same as [0-9])",
                "key": " \\d"
            },
            {
                "val": "Space, tab, or newline ",
                "key": "\\s"
            },
            {
                "val": "Literally match special characters:  + * ( ) // [ ] \\ | { } ^ $ @",
                "key": "\\"
            },
            {
                "val": "Beginning of a line",
                "key": "^"
            },
            {
                "val": "End of a line ",
                "key": "$"
            },
            {
                "val": "An optional thing",
                "key": "?"
            },
            {
                "val": "Any number of copies OR nothing at all",
                "key": "*"
            },
            {
                "val": "Any number of copies",
                "key": "+"
            },
            {
                "val": "m to n copies ",
                "key": "{}"
            },
            {
                "val": "One or the other",
                "key": "|"
            },
            {
                "val": "Capture parts of match in numbered variables",
                "key": "()"
            },
            {
                "val": "AND group things together for repetition, etc",
                "key": "()"
            }
        ]
    }
}