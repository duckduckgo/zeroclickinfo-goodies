{
    "id": "golang_cheat_sheet",
    "name": "Go Language",
    "description":"Basic Syntax, functions, and expressions of golang",
    "metadata": {
        "sourceName": "GitHub",
        "sourceUrl": "https://github.com/a8m/go-lang-cheat-sheet"
    },
    "aliases": [
        "go",
        "go lang",
        "go-lang",
        "golang operators",
        "golang functions",
        "golang script"
    ],
    "template_type": "terminal",
    "section_order": [
        "Variables",
        "Operators and aliases",
        "Functions",
        "Built In Types",
        "Control Structures",
        "Arrays, Slices, Ranges",
        "Maps",
        "Structs",
        "Pointers",
        "Interfaces"
    ],
    "sections": {
        "Variables": [{
            "val": "Declare a variable",
            "key": "var varname vartype"
        }, {
            "val": "Declare a variable and assign a value",
            "key": "var varname vartype = value"
        }, {
            "val": "Declare a variable shorthand, only in func bodies, omit var keyword, type is always implicit",
            "key": "varname := value"
        }, {
            "val": "Declare a constant",
            "key": "const constant = value"
        }],
        "Functions": [{
            "val": "A simple function",
            "key": "func functionName() \\{\\}"
        }, {
            "val": "Function with parameters (types go after identifiers)",
            "key": "func functionName(param1 string, param2 int) \\{\\}"
        }, {
            "val": "Multiple parameters of the same type",
            "key": "func functionName(param1, param2 int) \\{\\}"
        }, {
            "val": "Return type declaration",
            "key": "func functionName() int \\{ return 42  \\}"
        }],
        "Built In Types": [{
            "val": "Bool is the set of boolean values, true and false",
            "key": "bool"
        }, {
            "val": "string is the set of all strings of 8-bit bytes, conventionally but not necessarily representing UTF-8-encoded text. A string may be empty, but not nil. Values of string type are immutable",
            "key": "string"
        }, {
            "val": "int is a signed integer type that is at least 32 bits in size. It is a distinct type, however, and not an alias for, say, int32",
            "key": "int"
        },  {
            "val": "int8 is the set of all signed 8-bit integers. Range: -128 through 127",
            "key": "int8"
        },  {
            "val": "int16 is the set of all signed 16-bit integers. Range: -32768 through 32767",
            "key": "int16"
        },  {
            "val": "int32 is the set of all signed 32-bit integers. Range: -2147483648 through 2147483647",
            "key": "int32"
        },  {
            "val": "int64 is the set of all signed 64-bit integers. Range: -9223372036854775808 through 9223372036854775807",
            "key": "int64"
        },  {
            "val": "uint is an unsigned integer type that is at least 32 bits in size. It is a distinct type, however, and not an alias for, say, uint32",
            "key": "uint"
        },  {
            "val": "uint8 is the set of all unsigned 8-bit integers. Range: 0 through 255",
            "key": "uint8"
        },  {
            "val": "uint16 is the set of all unsigned 16-bit integers. Range: 0 through 65535",
            "key": "uint16"
        },  {
            "val": "uint32 is the set of all unsigned 32-bit integers. Range: 0 through 4294967295",
            "key": "uint32"
        },  {
            "val": "uint64 is the set of all unsigned 64-bit integers. Range: 0 through 18446744073709551615",
            "key": "uint64"
        },  {
            "val": "uintptr is an integer type that is large enough to hold the bit pattern of any pointer",
            "key": "uintptr"
        },  {
            "val": "byte is an alias for uint8 and is equivalent to uint8 in all ways. It is used, by convention, to distinguish byte values from 8-bit unsigned integer values",
            "key": "byte"
        },  {
            "val": "rune is an alias for int32 and is equivalent to int32 in all ways. It is used, by convention, to distinguish character values from integer values",
            "key": "rune"
        },  {
            "val": "float32 is the set of all IEEE-754 32-bit floating-point numbers",
            "key": "float32"
        },  {
            "val": "float64 is the set of all IEEE-754 64-bit floating-point numbers",
            "key": "float64"
        },  {
            "val": "complex64 is the set of all complex numbers with float32 real and imaginary parts",
            "key": "complex64"
        },  {
            "val": "complex128 is the set of all complex numbers with float64 real and imaginary parts.",
            "key": "complex128"
        } ],
        "Control Structures": [{
            "val": "Main",
            "key": "func main() \\{...\\}"
        }, {
            "val": "If",
            "key": "if x > 0 \\{ return x\\} else \\{ return -x\\}"
        }, {
            "val": "For Loop",
            "key": "for i := 1; i < 10; i++ \\{...\\}"
        }, {
            "val": "For Loop (single condition)",
            "key": "for i < 10  \\{...\\}"
        }, {
            "val": "For Loop (no condition)",
            "key": "for \\{...\\}"
        }],
        "Arrays, Slices, Ranges": [{
            "key": "var a \\[10\\]int",
            "val": "Declare an int array with length 10. Array length is part of the type"
        }, {
            "key": "a\\[3\\] = 42",
            "val": "set elements"
        }, {
            "key": "i := a\\[3\\]",
            "val": "Read elements"
        }, {
            "key": "var a = \\[2\\]int\\{1, 2\\}",
            "val": "Declare and initialize"
        }, {
            "key": "a := \\[2\\]int\\{1, 2\\}",
            "val": "Shorthand"
        }, {
            "key": "a := \\[...\\]int\\{1, 2\\}",
            "val": "Elipsis -> Compiler figures out array length"
        }, {
            "key": "var a \\[\\]int",
            "val": "Declare a slice - similar to an array, but length is unspecified"
        }, {
            "key": "var a = \\[\\]int \\{1, 2, 3, 4\\}",
            "val": "Declare and initialize a slice (backed by the array given implicitly)"
        }, {
            "key": "a := \\[\\]int\\{1, 2, 3, 4\\}",
            "val": "Shorthand"
        }, {
            "key":"chars := \\[\\]string\\{0: \"a\", 2:\"c\", 1:\"b\"\\}",
            "val": "\\[ \"a\", \"b\", \"c\" \\]"
        }, {
            "key": "var b = a\\[lo:hi\\]",
            "val": "Creates a slice (view of the array) from index lo to hi-1"
        }, {
            "key": "var b = a\\[1:4\\] ",
            "val": "Slice from index 1 to 3"
        }, {
            "key": "var b = a\\[:3\\]",
            "val": "Missing low index implies 0"
        }, {
            "key": "var b = a\\[3:\\]",
            "val": "Missing high index implies len(a)"
        }, {
            "key":"a = make(\\[\\]byte, 5, 5)",
            "val":"Create a slice with make, first arg length, second capacity"
        }, {
            "key":"a = make(\\[\\]byte, 5)",
            "val":"Create a slice with make, capacity is optional"
        }, {
            "key":"x := \\[2\\]string\\{\"applies\", \"oranges\"\\}",
            "val":"Create a slice from an array"
        }, {
            "key":"s := x\\[:\\]",
            "val":"A slice referencing the storage of x"
        }],
        "Maps": [{
            "key": "var m map\\[string\\]int m = make(map\\[string\\]int) m\\[\"key\"\\] = 42 fmt.Println(m\\[\"key\"\\]) delete(m, \"key\") elem, ok := m\\[\"key\"\\]",
            "val": "Map syntax"
        }, {
            "key": "var m = map\\[string\\]Vertex\\{\"Bell Labs\": \\{40.68433, -74.39967\\}, \"Google\": \\{37.42202, -122.08408\\}\\}",
            "val": "Map literal"
        }],
        "Structs": [{
            "key": "type Vertex struct \\{ X, Y int \\}",
            "val": "Struct declaration"
        }, {
            "key": "var v = Vertex\\{1, 2\\}",
            "val":  "Creating"
        }, {
            "key": "var v = Vertex\\{X: 1, Y: 2\\}",
            "val": "Creates a struct by defining values with keys"
        }, {
            "key": "v.X = 4",
            "val": "Accessing members"
        }, {
            "key": "v.Abs()",
            "val": "Call method"
        }, {
            "key": "point := struct \\{X, Y int\\}\\{1, 2\\}",
            "val": "Anonymous structs"
        }],
        "Pointers": [{
            "key": "p := Vertex\\{1, 2\\}",
            "val": "p is a Vertex"
        }, {
            "key": "q := &p",
            "val": "q is a pointer to a Vertex"
        }, {
            "key": "r := &Vertex\\{1, 2\\}",
            "val": "r is a pointer to a Vertex"
        }, {
            "key": "var s *Vertex = new(Vertex)",
            "val": "new creates a pointer to a new struct instance"
        }],
        "Interfaces": [{
            "key": "type Awesomizer interface \\{ Awesomize() string\\}",
            "val": "Interface declaration"
        }, {
            "key":"type Foo struct \\{\\}",
            "val": "Types do *not* declare to implement interfaces"
        }, {
            "key": "func (foo Foo) Awesomize() string \\{ return \"Awesome!\"\\}",
            "val": "Rather, types implicitly satisfy an interface if they implement all required methods"
        }],
        "Operators and aliases": [{
            "key": "+",
            "val":"Addition"
        }, {
            "key": "-",
            "val":"Subtraction"
        }, {
            "key": "*",
            "val":"Multiplication"
        }, {
            "key": "/",
            "val":"Quotient"
        }, {
            "key": "%",
            "val":"Remainder"
        }, {
            "key": "&",
            "val":"Bitwise and"
        }, {
            "key": "|",
            "val":"Bitwise or"
        }, {
            "key": "^",
            "val":"Bitwise xor"
        }, {
            "key": "&^",
            "val":"Bit clear (and not)"
        }, {
            "key": "<<",
            "val":"Left shift"
        }, {
            "key": ">>",
            "val":"Right shift"
        }, {
            "key": "==",
            "val":"Equal"
        }, {
            "key": "!=",
            "val":"Not equal"
        }, {
            "key": "<",
            "val":"Less than"
        }, {
            "key": "<=",
            "val":"Less than or equal"
        }, {
            "key": ">",
            "val":"Greater than"
        }, {
            "key": ">=",
            "val":"Greater than or equal"
        }, {
            "key": "&&",
            "val":"Logical and"
        }, {
            "key": "||",
            "val":"Logical or"
        }, {
            "key": "!",
            "val":"Logical not"
        },  {
            "key": "&",
            "val":"Address of / create pointer"
        }, {
            "key": "*",
            "val":"Dereference pointer"
        }, {
            "key": "<-",
            "val":"Send / receive operator"
        } ]
    }
}
