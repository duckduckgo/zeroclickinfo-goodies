{
    "id": "cpp_strings_cheat_sheet",
    "name": "C++ Strings",
    "description": "List of basic String operations in C++",
    "metadata": {
        "sourceName": "Cplusplus",
        "sourceUrl": "http://www.cplusplus.com/reference/string/string/"
    },
    "aliases": ["c++ strings","c++ string","cpp string"],
    "template_type": "code",
    "section_order": ["Constructors", "Capacity", "Element Access", "Modifiers", "String operations"],
    "sections": {
        "Constructors": [{
            "key": "std::string str (\"Another character sequence\");",
            "val": "From Buffer"
        }, {
            "key": "std::string str (str1);",
            "val": "Copy Constructor"
        }, {
            "key": "std::string str (str1, 8, 3);",
            "val": "Substring Constructor"
        }, {
            "key": "std::string str (\"A character sequence\", 6);",
            "val": "From C-String"
        }, {
            "key": "std::string str;",
            "val": "Empty String Constructor (Default Constructor)"
        }],
        "Capacity": [{
            "key": "str.size()",
            "val": "Get the size of string str"
        }, {
            "key": "str.length()",
            "val": "Get the size of string str"
        }, {
            "key": "str.max_size()",
            "val": "The maximum possible size a string can have"
        }, {
            "key": "str.resize(n, c = 0)",
            "val": "Changes the size of str to n, deleting characters after n or replacing them with c ('\\0' if uninitialized)"
        }, {
            "key": "str.capacity()",
            "val": "Size of the storage space currently allocated for the string"
        }, {
            "key": "str.reserve(n = 0)",
            "val": "Ensures that the capacity of the string is at least n (0 if uninitialized)"
        }, {
            "key": "str.clear()",
            "val": "Sets str's contents to an empty string"
        }, {
            "key": "str.empty()",
            "val": "Returns whether str's length is 0."
        }, {
            "key": "str.shrink_to_fit()",
            "val": "Requests (this may do nothing!) that str's capacity is set to its length"
        }],
        "Element Access": [{
            "key": "str[i]",
            "val": "Access i-th element of string str"
        }, {
            "key": "str.at(i)",
            "val": "Checked access to i-th element of string str"
        }, {
            "key": "str.back()",
            "val": "Returns the last element of str (ie str[str.size() - 1])"
        }, {
            "key": "str.front()",
            "val": "Returns the first element of str (ie str[0])"
        }],
        "Modifiers": [{
            "key": "str += \"example\"",
            "val": "Appends \"example\" to str"
        }, {
            "key": "str.append(\"example\")",
            "val": "Appends \"example\" to str.  Synonymous with `operator+=`"
        }, {
            "key": "str.push_back('\n')",
            "val": "Appends '\n' to str.  All usages can be replaced with `operator+=`"
        }, {
            "key": "str.assign(other)",
            "val": "Assigns a new value to the string, replacing its current contents.  `assign` has more overloads than `operator=` as multiple parameters are allowed"
        }, {
            "key": "str.insert(pos, other)",
            "val": "Inserts (without deleting any elements) other at pos characters into str"
        }, {
            "key": "str.erase()",
            "val": "Removes all characters from str.  Synonymous with `clear`"
        }, {
            "key": "str.erase(n)",
            "val": "Erases all elements from and including n characters in to the end"
        }, {
            "key": "str.erase(n, len)",
            "val": "Removes len elements starting from and including the character at position n"
        }, {
            "key": "str.erase(iterator)",
            "val": "Removes the character iterator points at"
        }, {
            "key": "str.erase(iterator_begin, iterator_end)",
            "val": "Removes all characters in [iterator_begin, iterator_end)."
        }, {
            "key": "str.replace(begin, end, other)",
            "val": "Removes the characters in the range [begin,end), then inserts other at begin"
        }, {
            "key": "str.replace(pos, len, other)",
            "val": "Removes the characters starting at pos and going len characters, then inserts other at pos"
        }, {
            "key": "str.swap(other)",
            "val": "Replaces str's contents with other's contents and other's contents with str's"
        }, {
            "key": "str.pop_back()",
            "val": "Removes the last character of the string, but doesn't return it"
        }],
        "String operations": [{
            "key": "str.c_str()",
            "val": "Returns a pointer to the null terminated c string.  May be invalidated when non const functions are called on str."
        }, {
            "key": "str.data()",
            "val": "Synonymous with `c_str`"
        }, {
            "key": "str.get_allocator()",
            "val": "Returns a copy of the allocator object associated with the string"
        }, {
            "key": "str.copy(out, len, pos = 0)",
            "val": "Copies len characters, starting at pos characters into str, into out"
        }, {
            "key": "str.find(substring, pos = 0)",
            "val": "Returns the first occurence of substring, starting pos characters into str"
        }, {
            "key": "str.find(c, pos = 0)",
            "val": "Returns the first occurence of the character c, starting pos characters into str"
        }, {
            "key": "str.find(substring, pos = infinity)",
            "val": "Returns the last occurence of substring, starting pos characters into str"
        }, {
            "key": "str.find(c, pos = infinity)",
            "val": "Returns the last occurence of the character c, starting pos characters into str"
        }, {
            "key": "str.find_first_of(matches, pos = 0)",
            "val": "Returns the first occurence of any character in matches in str, starting pos characters in"
        }, {
            "key": "str.find_last_of(matches, pos = infinity)",
            "val": "Returns the last occurence of any character in matches in str, starting pos characters in"
        }, {
            "key": "str.find_first_not_of(matches, pos = infinity)",
            "val": "Returns the first occurence of a character not in matches, starting pos characters into str"
        }, {
            "key": "str.find_last_not_of(matches, pos = infinity)",
            "val": "Returns the last occurence of a character not in matches, starting pos characters into str"
        }, {
            "key": "str.substr()",
            "val": "Returns a copy of the string"
        }, {
            "key": "str.substr(pos)",
            "val": "Returns a copy of the string, starting pos characters in and going to the end"
        }, {
            "key": "str.substr(pos, len)",
            "val": "Returns a copy of the string, starting pos characters in and len characters long"
        }, {
            "key": "str.compare(other)",
            "val": "Returns strcmp of the str and other: 0 means equal, <0 means first mismatch is less in str than other (includes str shorter than other as null terminated), and >0 means first mismatch is greater in str than other"
        }, {
            "key": "str.compare(pos, len, other)",
            "val": "Returns strcmp of the substring starting at pos and going len characters into str and other"
        }]
    }
}

