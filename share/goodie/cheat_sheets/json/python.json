{
    "id": "python_cheat_sheet",
    "name": "python",
    "description": "Complete python cheat sheet",
    "metadata": {
        "sourceName": "rgruet",
        "sourceUrl": "http://overapi.com/python/"
    },
    "template_type": "keyboard",
    "section_order": [
        "Invocation Options",
        "Environment Variables",
        "String Literal Escapes",
        "Operations on String",
        "Format codes",
        "File operations",
        "Posix functions",
        "Posixpath functions",
        
    ],
    "sections": {
        "Invocation Options": [{
            "key": "Prevents module import from creating a .pyc or .pyo files",
            "val": "-B"
        }, {
            "val": "-d",
            "key": "Output parser debugging information"
        }, {
            "val": "-E",
            "key": "Ignore environment variables"
        }, {
            "val": "-h",
            "key": "print a help message and exit"
        }, {
            "val": "-i",
            "key": "Inspect interactively after runnning script and force prompts even if stdin appears not to be a terminal"
        }, {
            "val": "-m module",
            "key": "Search for module on sys.path and runs the module as a script"
        }, {
            "val": "-O",
            "key": "Optimized generated bytecode ,Asserts are suppressed"
        }, {
            "val": "-OO",
            "key": "Remove doc-strings in addition to the -O optimizations."
        }, {
            "val": "-Q arg",
            "key": "Divsion options: -Qold (default), -Qwarn, -Qwarnall, -Qnew "
        }, {
            "val": "-s",
            "key": "Disables the user-specific module path"
        }, {
            "val": "-S",
            "key": "Don't perform import-site on initialization"
        }, {
            "val": "-t",
            "key": "Issues warnings on inconsistent tab usage"
        }, {
            "val": "-u",
            "key": "unbuffered binary stdout and stderr"
        }, {
            "val": "-U",
            "key": "Force python to interpret all strings literals as unicode literals"
        }, {
            "val": "-v",
            "key": "Verbose(trace import statements)"
        }, {
            "val": "-V",
            "key": "Print the python version number and exit "
        },
         {
            "val": "-W arg",
            "key": "Warning control"
        }, {
            "val": "-x",
            "key": "Skip first line of source ,allowing use of non-unix forms of #!cmd"
        }, {
            "val": "-3",
            "key": "emit a DeprecationWarning for Python 3.x incompatibilities "
        }, {
            "val": "-c command",
            "key": "specify the command to execute"
        }, {
            "val": "scriptFile",
            "key": "The name of a python file (.py) to execute. Read from stdin. "
        }, {
            "val": "-",
            "key": "program read from stdin"
        }, {
            "val": "args",
            "key": "Passed to script or command"
        }, {
            "val": "",
            "key": "if no scriptFile or command ,Python enters interactive mode "
        }], 
      "Environment Variables": [{
            "val": "PYTHONHOME",
            "key": "Alternate prefix directory.The default module search path uses prefix/lib"
        }, {
            "val": "PYTHONPATH",
            "key": "Augments the default search path for module files.The format is same as shell's $path. one or mpre directory path names seperated by ':' or ';'without spaces around (semi)) colons !  "
        }, {
            "val": "PYTHONSTARTUP",
            "key": "If this is the name of readable file , the python commands in that file are executed before the first prompt is displayed in interactive mode (no default) "
        }, {
            "val": "PYHTONDEBUG",
            "key": "If nonempty, same as -d option "
        }, {
            "val": "PYTHONINSPECT",
            "key": "If nonempty, same as -i option"
        }, {
            "val": "PYTHONOPTIMIZE",
            "key": "If nonempty, same as -O option"
        }, {
            "val": "PYTHONBUFFERED",
            "key": "If nonempty, same as -u option"
        }, {
            "val": "PYTHONVERBOSE",
            "key": "If nonempty, same as -v option"
        }, {
            "val": "PYTHONCASEOK",
            "key": "If nonempty, ignore case in file/module names (imports) "
        }, {
            "val": "PYTHONDONTWRITEBYTECODE",
            "key": "If nonempty,same as -B option "
        }, {
            "val": "PYTHONIOENCODING",
            "key": "Alternate encodingname or encodingname:errorhandler for stdin, stdout, and stderr, with the same choices accepted by str.encode()."
        }, {
            "val": "PYTHONUSERBASE",
            "key": "Provides a private site-packages directory for user-specific modules. "
        }, {
            "val": "PYTHONNOUSERSITE",
            "key": "If nonempty,same as -s option"
        }] , 
         "String Literal Escapes" : [{
            "val": "\newline",
            "key": "Ignored (escape newline)"
        }, {
            "val": "\\",
            "key": "Backslash"
        }, {
            "val": "\\e",
            "key": "Escapes"
        }, {
            "val": "\\v",
            "key": "Vertical Tab [VT]"
        }, {
            "val": "'",
            "key": "Single Quote"
        }, {
            "val": "\f",
            "key": "Formfeed (FF)"
        }, {
            "val": "\\ooo",
            "key": "Character with octal value "
        }, {
            "val": " ",
            "key": "Double Quote"
        }, {
            "val": "\\n",
            "key": "Linefeed "
        }, {
            "val": "\\a",
            "key": "Bell"
        }, {
            "val": "\\r",
            "key": "Carriage Return"
        }, {
            "val": "\\xhh",
            "key": "Char with hex value"
        }, {
            "val": "\\b",
            "key": "Backspace"
        }, {
            "val": "\\t",
            "key": "Horizontal tab"
        }, {
            "val": "\\uxxxx",
            "key": "Character with 16 bit hex value xxxx (Unicode value)"
        }, {
            "val": "\\Uxxxxxxxx",
            "key": "Character with 32-bit hex value xxxxxxxx (Unicode value)"
        }, {
            "val": "\\N{name}",
            "key": "Character named in the Unicode database (unicode only)"
        }, {
            "val": "\\AnyOtherChar",
            "key": "left as-is, including the backslash, e.g. str('\\z') == '\\z'"
        }],
        "Operations on String": [{
            "val": "s.capitalize()",
            "key": "Returns a copy of s with its first character capitalized, and the rest of the characters lowercased."
        }, {
            "val": "s.center(width[,fillChar=' '])",
            "key": "Returns a copy of s centered in a string of length width, surrounded by the appropriate number of fillChar characters."
        }, {
            "val": "s.count(sub[, start[,end]])",
            "key": "Returns the number of occurrences of substring sub in string s."
        }, {
            "val": "s.decode([encoding[,errors]])",
            "key": "Returns a unicode string representing the decoded version of str s, using the given codec (encoding). Useful when reading from a file or a I/O function that handles only str. Inverse of encode."
        }, {
            "val": "s.encode([encoding[,errors]])",
            "key": "Returns a str representing an encoded version of s. Mostly used to encode a unicode string to a str in order to print it or write it to a file (since these I/O functions only accept str), e.g. u'légère'.encode ('utf8'). Also used to encode a str to a str, e.g. to zip (codec 'zip') or uuencode (codec 'uu') it. Inverse of decode."
        }, {
            "val": "s.endswith(suffix [,start[, end]])",
            "key": "Returns True if s ends with the specified suffix, otherwise return false."
        }, {
            "val": "s.expandtabs ([tabsize])",
            "key": "Returns a copy of s where all tab characters are expanded using spaces."
        }, {
            "val": "s.find(sub [,start[,end]])",
            "key": "Returns the lowest index in s where substring sub is found. Returns -1 if sub is not found."
        }, {
            "val": "s.format(*args,*kwargs)",
            "key": "Returns s after replacing numeric and named formatting references found in braces {}."
        }, {
            "val": "s.index(sub[, start[,end]])",
            "key": "like find(), but raises ValueError when the substring is not found."
        }, {
            "val": "s.isalnum()",
            "key": "Returns True if all characters in s are alphanumeric, False otherwise."
        }, {
            "val": "s.isalpha()",
            "key": "Returns True if all characters in s are alphabetic, False otherwise."
        }, {
            "val": "s.isdigit()",
            "key": "Returns True if all characters in s are digit characters, False otherwise."
        }, {
            "val": "s.islower()",
            "key": "Returns True if all characters in s are lowercase, False otherwise."
        } , {
            "val": "s.isspace()",
            "key": "Returns True if all characters in s are whitespace characters, False otherwise."
        }, {
            "val": "s.istitle()",
            "key": "Returns True if string s is a titlecased string, False otherwise."
        }, {
            "val": "s.isupper()",
            "key": "Returns True if all characters in s are uppercase, False otherwise."
        }, {
            "val": "seperator.join(seq)",
            "key": "Returns a concatenation of the strings in the sequence seq, separated by string separator, e.g.: ",".join(['A', 'B', 'C']) -> "A,B,C""
        }, {
            "val": "s.ljust/rjust/center (width[, fillChar=' '])",
            "key": "Returns s left/right justified/centered in a string of length width."
        }, {
            "val": "s.lower()",
            "key": "Returns a copy of s converted to lowercase."
        }, {
            "val": "s.lstrip([chars] )",
            "key": "Returns a copy of s with leading chars (default: blank chars) removed."
        }, {
            "val": "s.partition(separ)",
            "key": "Searches for the separator separ in s, and returns a tuple (head, sep,tail) containing the part before it, the separator itself, and the part after it. If the separator is not found, returns (s, '', '')."
        } ,{
            "val": "s.replace(old, new[,maxCount =-1])",
            "key": "Returns a copy of s with the first maxCount (-1: unlimited) occurrences of substring old replaced by new."
        }, {
            "val": "s.rfind(sub[ , start[,end]])",
            "key": "Returns the highest index in s where substring sub is found. Returns -1 if sub is not found."
        }, {
            "val": "s.rindex(sub[ , start[,end]])",
            "key": "like rfind(), but raises ValueError when the substring is not found."
        }, {
            "val": "s.rpartition(separ)",
            "key": "Searches for the separator separ in s, starting at the end of s, and returns a tuple (head, sep, tail) containing the (left) part before it, the separator itself, and the (right) part after it. If the separator is not found, returns ('', '', s)."
        }, {
            "val": "s.rstrip([chars])",
            "key": "Returns a copy of s with trailing chars(default: blank chars) removed, e.g.a Path.rstrip('/') will remove the trailing '/'from aPath if it exists"
        }, {
            "val": "s.split([ separator[,maxsplit]])",
            "key": "Returns a list of the words in s, using separator as the delimiter string."
        }, {
            "val": "s.rsplit([ separator[,maxsplit]])",
            "key": "Same as split, but splits from the end of the string."
        }, {
            "val": "s.splitlines([ keepends])",
            "key": "Returns a list of the lines in s, breaking at line boundaries."
        }, {
            "val": "s.startswith(prefix [,start[, end]])",
            "key": "Returns True if s starts with the specified prefix, otherwise returns False.Negative numbers may be used for start and end. Since 2.5 prefix can also be a tuple of strings to try."
        }, {
            "val": "s.strip([chars])",
            "key": "Returns a copy of s with leading and trailing chars(default: blank chars)removed."
        }, {
            "val": "s.swapcase()",
            "key": "Returns a copy of s with uppercase characters converted to lowercase and vice versa."
        }, {
            "val": "s.title()",
            "key": "Returns a titlecased copy of s, i.e. words start with uppercase characters,all remaining cased characters are lowercase."
        }, {
            "val": "s.translate(table[,deletechars=''])",
            "key": "Returns a copy of s mapped through translation table table. Characters from deletechars are removed from the copy prior to the mapping."
        }, {
            "val": "s.upper()",
            "key": "Returns a copy of s converted to uppercase."
        }, {
            "val": "s.zfill(width)",
            "key": "Returns the numeric string left filled with zeros in a string of length width."
        }],
        "Format codes": [{
            "val": "d",
            "key": "Signed integer decimal"
        }, {
            "val": "i",
            "key": "Signed integer decimal"
        }, {
            "val": "o",
            "key": "Unsigned octal"
        }, {
            "val": "u",
            "key": "Unsigned decimal "
        }, {
            "val": "x",
            "key": "Unsigned hexadecimal (lowercase)"
        }, {
            "val": "X",
            "key": "Unsigned hexadecimal (uppercase)"
        }, {
            "val": "e",
            "key": "Floating point exponential format (lowercase)"
        }, {
            "val": "E",
            "key": "Floating point exponential format (uppercase)"
        }, {
            "val": "f",
            "key": "Floating point decimal format"
        }, {
            "val": "F",
            "key": "Floating point decimal format"
        }, {
            "val": "g",
            "key": "Same as e if exponent is greater than -4 or less than precision, f otherwise."
        }, {
            "val": "G",
            "key": "Same as E if exponent is greater than -4 or less than precision, F otherwise."
        }, {
            "val": "c",
            "key": "Single character (accepts integer or single character string)."
        }, {
            "val": "r",
            "key": "String (converts any python object using repr())."
        }, {
            "val": "s",
            "key": "String (converts any python object using str())."
        }, {
            "val": "%",
            "key": "No argument is converted, results in a % character in the result. (The complete specification is %%.)"
        }],
        "File operations": [{
            "val": "f.close()",
            "key": "Close file f "
        }, {
            "val": "f.fileno()",
            "key": "Get fileno (fd) for file f"
        }, {
            "val": "f.flush()",
            "key": "Flush file f's internal buffer."
        }, {
            "val": "f.isatty()",
            "key": "1 if file f is connected to a tty-like dev, else 0."
        }, {
            "val": "f.next()",
            "key": "Returns the next input line of file f, or raises StopIteration when EOF is hit. Files are their own iterators. next is implicitly called by constructs like for line in f: print line."
        }, {
            "val": "f.read([size])",
            "key": "Read at most size bytes from file f and return as a string object. If size omitted, read to EOF."
        }, {
            "val": "f.readline()",
            "key": "Read one entire line from file f. The returned line has a trailing \n, except possibly at EOF. Return '' on EOF."
        }, {
            "val": "f.readlines()",
            "key": "Read until EOF with readline() and return a list of lines read."
        }, {
            "val": "f.xreadlines()",
            "key": "Return a sequence-like object for reading a file line-by-line without reading the entire file into memory."
        }, {
            "val": "f.tell()",
            "key": "Return file f's current position (byte offset)."
        } , {
            "val": "f.truncate([size])",
            "key": "Truncate f's size. If size is present, f is truncated to (at most) that size,otherwise f is truncated at current position (which remains unchanged)."
        }, {
            "val": "f.write(str)",
            "key": "Write string to file f."
        }, {
            "val": "f.writelines(list)",
            "key": "Write list of strings to file f. No EOL are added."
        }],
        "Posix functions": [{
            "val": "access(path, mode)",
            "key": "Returns True if the requested access to path is granted. Use mode=F_OK to check for existence, or an OR-ed combination of R_OK, W_OK, and X_OK to check for r, w, x permissions."
        }, {
            "val": "chdir(path)",
            "key": "Changes current directory to path."
        }, {
            "val": "chmod(path, mode)",
            "key": "Changes the mode of path to the numeric mode"
        }, {
            "val": "close(fd)",
            "key": "Closes file descriptor fd opened with posix.open."
        }, {
            "val": "_exit(n)",
            "key": "Immediate exit, with no cleanups, no SystemExit, etc... Should use this to exit a child process"
        }, {
            "val": "execv(p, args)",
            "key": "Become executable p with args args"
        }, {
            "val": "getcwd()",
            "key": "Returns a string representing the current working directory."
        }, {
            "val": "getcwdu()",
            "key": "Returns a Unicode string representing the current working directory."
        }, {
            "val": "getpid()",
            "key": "Returns the current process id."
        }, {
            "val": "getsid()",
            "key": "Calls the system call getsid() [Unix]."
        }, {
            "val": "fork()" ,
            "key": "Like C's fork(). Returns 0 to child, child pid to parent [Not on Windows]."
        }, {
            "val": "kill(pid, signal)" ,
            "key": "Like C's kill [Not on Windows]."
        },{
            "val": "listdir(path)" ,
            "key": "Lists (base)names of entries in directory path, excluding '.' and '..'. If path is a Unicode string, so will be the returned strings."
        } ,{
            "val": "lseek(fd, pos, how)",
            "key": "Sets current position in file fd to position pos, expressed as an offset relative to beginning of file (how=0), to current position (how=1), or to end of file (how=2)."
        } ,{
            "val":"mkdir(path[, mode])" ,
            "key":"Creates a directory named path with numeric mode (default 0777). Actual permissions = (mode & ~umask & 0777). To set directly the permissions, use chmod() after dir creation." 
        } , {
            "val":"open(file, flags, mode)",
            "key":"Like C's open(). Returns file descriptor. Use file object functions rather than this low level ones."
        } , {
            "val":"pipe()",
            "key":"Creates a pipe. Returns pair of file descriptors (r, w) [Not on Windows]."
        },{
            "val": "popen(command, mode='r',bufSize=0)",
            "key": "Opens a pipe to or from command. Result is a file object to read to or write from, as indicated by mode being 'r' or 'w'. Use it to catch a command output ('r'mode), or to feed it ('w' mode)."
        } ,{
            "val":"remove(path)" ,
            "key":"See unlink."
        },{
            "val":"rename(old, new)",
            "key":"Renames/moves the file or directory old to new. [error if target name already exists]"
        },{
            "val":"renames(old, new)",
             "key":"recursive directory or file renaming function."
        },{
            "val":"rmdir(path)" ,
            "key":"Removes the empty directory path" 
        },{
            "val":"read(fd, n)",
            "key":"Reads n bytes from file descriptor fd and return as string."
        },{
            "val":"stat(path)",
            "key":"Returns st_mode, st_ino, st_dev, st_nlink, st_uid,st_gid, st_size, st_atime,st_mtime, st_ctime. [st_ino, st_uid, st_gid are dummy on Windows]"
        },{
            "val":"system(command)",
            "key":"Executes string command in a subshell. Returns exit status of subshell (usually 0 means OK)."
        } ,{
            "val":"times()",
            "key":"Returns accumulated CPU times in sec (user, system, children's user, children's sys, elapsed real time) "
        },{
            "val":"unlink(path)" ,
            "key":"Unlinks (deletes) the file (not dir!) path. Same as: remove."
        },{
            "val":"utime(path, (aTime, mTime))",
            "key": "Sets the access & modified time of the file to the given tuple of values."
        },{
            "val":"wait()",
            "key":"Waits for child process completion. Returns tuple of pid, exit_status [Not on Windows]."
        },{
            "val":"waitpid(pid, options)",
            "key":"Waits for process pid to complete. Returns tuple of pid, exit_status [Not on Windows]."
        },{
            "val":"walk(top[, topdown=True [,onerror=None[,followlinks=False]]])" ,
            "key":"Generates a list of file names in a directory tree, by walking the tree either top down or bottom up. For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple (dirpath, dirnames, filenames) - more info here. See also os.path.walk()."
        },{
            "val":"write(fd, str)" ,
            "key":"Writes str to file fd. Returns nb of bytes written." 
        }],
        "Posixpath functions": [{
            "val": "abspath(path)",
            "key": "Returns absolute path for path, taking current working dir in account."
        }, {
            "val": "exists(path)",
            "key": "True if path is the path of an existing file or directory."
        }, {
            "val": "expanduser(path)",
            "key": "Returns a copy of path with ~ expansion done."
        }, {
            "val": "getatime(path)",
            "key": "Returns last access time of path (integer nb of seconds since epoch)."
        }, {
            "val": "getctime(path)",
            "key": "Returns the metadata change time of path (integer nb of seconds since epoch)."
        }, {
            "val": "getmtime(path)",
            "key": "Returns last modification time of path (integer nb of seconds since epoch)."
        } ,{
            "val": "getsize(path)",
            "key": "Returns the size in bytes of path. os.error if file inexistent or inaccessible."
        }, {
            "val": "isabs(path)",
            "key": "True if path is absolute."
        }, {
            "val": "isdir(path)",
            "key": "True if path is a directory."
        }, {
            "val": "isfile(path)" ,
            "key": "True if path is a regular file."
        }, {
            "val": "islink(path)",
            "key": "True if path is a symbolic link."
        }, {
            "val": "ismount(path)",
            "key": "True if path is a mount point [true for all dirs on Windows]."
        }, {
            "val": "join(p[,q[,...]])",
            "key": "Joins one or more path components in a way suitable for the current OS."
        }, {
            "val": "normcase(path)",
            "key": "Normalizes case of path. Has no effect under Posix."
        }, {
            "val": "normpath(path)",
            "key": "Normalizes path, eliminating double slashes, etc."
        },{
            "val":"samefile(f1, f2)",
            "key":"True if the 2 paths f1 and f2 reference the same file."
        },{
            "val":"sameopenfile(f1, f2)",
            "key":"True if the 2 open file objects f1 and f2 reference the same file."
        },{
            "val":"samestat(s1, s2)",
            "key":"True if the 2 stat buffers s1 and s2 reference the same file."
        },{
            "val":"split(p)",
            "key":"Splits p into (head, tail) where tail is last pathname component and head is everything leading up to that. <=> (dirname(p), basename(p))"
        },{
            "val":"splitdrive(p)",
            "key":"Splits path p in a pair ('drive:', tail) [Windows]" 
        },{
            "val":"splitext(p)",
            "key":"Splits into (root, ext) where last comp of root contains no periods and ext is empty or starts with a period."
        
        }]
    }
}
