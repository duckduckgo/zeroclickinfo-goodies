{
    "id": "python_cheat_sheet",
    "name": "python",
    "description": "Complete python cheat sheet",
    "metadata": {
        "sourceName": "rgruet",
        "sourceUrl": "http://overapi.com/python/"
    },
    "template_type": "keyboard",
    "section_order": [
        "Invocation Options",
        "Environment Variables",
        "String Literal Escapes",
        "Operations on String",
        "Format codes",
        "Fly mode",
        "Switching modes",
        "Modeling",
        "Editing curves",
        "Sculpting",
        "Animation",
        "Node editor",
        "Armatures",
        "Pose mode",
        "Timeline",
        "Video Sequence Editor",
        "Advanced"
    ],
    "sections": {
        "Invocation Options": [{
            "key": "Prevents module import from creating a .pyc or .pyo files",
            "val": "-B"
        }, {
            "val": "-d",
            "key": "Output parser debugging information"
        }, {
            "val": "-E",
            "key": "Ignore environment variables"
        }, {
            "val": "-h",
            "key": "print a help message and exit"
        }, {
            "val": "-i",
            "key": "Inspect interactively after runnning script and force prompts even if stdin appears not to be a terminal"
        }, {
            "val": "-m module",
            "key": "Search for module on sys.path and runs the module as a script"
        }, {
            "val": "-O",
            "key": "Optimized generated bytecode ,Asserts are suppressed"
        }, {
            "val": "-OO",
            "key": "Remove doc-strings in addition to the -O optimizations."
        }, {
            "val": "-Q arg",
            "key": "Divsion options: -Qold (default), -Qwarn, -Qwarnall, -Qnew "
        }, {
            "val": "-s",
            "key": "Disables the user-specific module path"
        }, {
            "val": "-S",
            "key": "Don't perform import-site on initialization"
        }, {
            "val": "-t",
            "key": "Issues warnings on inconsistent tab usage"
        }, {
            "val": "-u",
            "key": "unbuffered binary stdout and stderr"
        }, {
            "val": "-U",
            "key": "Force python to interpret all strings literals as unicode literals"
        }, {
            "val": "-v",
            "key": "Verbose(trace import statements)"
        }, {
            "val": "-V",
            "key": "Print the python version number and exit "
        },
         {
            "val": "-W arg",
            "key": "Warning control"
        }, {
            "val": "-x",
            "key": "Skip first line of source ,allowing use of non-unix forms of #!cmd"
        }, {
            "val": "-3",
            "key": "emit a DeprecationWarning for Python 3.x incompatibilities "
        }, {
            "val": "-c command",
            "key": "specify the command to execute"
        }, {
            "val": "scriptFile",
            "key": "The name of a python file (.py) to execute. Read from stdin. "
        }, {
            "val": "-",
            "key": "program read from stdin"
        }, {
            "val": "args",
            "key": "Passed to script or command"
        }, {
            "val": "",
            "key": "if no scriptFile or command ,Python enters interactive mode "
        }], 
      "Environment Variables": [{
            "val": "PYTHONHOME",
            "key": "Alternate prefix directory.The default module search path uses prefix/lib"
        }, {
            "val": "PYTHONPATH",
            "key": "Augments the default search path for module files.The format is same as shell's $path. one or mpre directory path names seperated by ':' or ';'without spaces around (semi)) colons !  "
        }, {
            "val": "PYTHONSTARTUP",
            "key": "If this is the name of readable file , the python commands in that file are executed before the first prompt is displayed in interactive mode (no default) "
        }, {
            "val": "PYHTONDEBUG",
            "key": "If nonempty, same as -d option "
        }, {
            "val": "PYTHONINSPECT",
            "key": "If nonempty, same as -i option"
        }, {
            "val": "PYTHONOPTIMIZE",
            "key": "If nonempty, same as -O option"
        }, {
            "val": "PYTHONBUFFERED",
            "key": "If nonempty, same as -u option"
        }, {
            "val": "PYTHONVERBOSE",
            "key": "If nonempty, same as -v option"
        }, {
            "val": "PYTHONCASEOK",
            "key": "If nonempty, ignore case in file/module names (imports) "
        }, {
            "val": "PYTHONDONTWRITEBYTECODE",
            "key": "If nonempty,same as -B option "
        }, {
            "val": "PYTHONIOENCODING",
            "key": "Alternate encodingname or encodingname:errorhandler for stdin, stdout, and stderr, with the same choices accepted by str.encode()."
        }, {
            "val": "PYTHONUSERBASE",
            "key": "Provides a private site-packages directory for user-specific modules. "
        }, {
            "val": "PYTHONNOUSERSITE",
            "key": "If nonempty,same as -s option"
        }] , 
         "String Literal Escapes" : [{
            "val": "\newline",
            "key": "Ignored (escape newline)"
        }, {
            "val": "\\",
            "key": "Backslash"
        }, {
            "val": "\e",
            "key": "Escapes"
        }, {
            "val": "\v",
            "key": "Vertical Tab [VT]"
        }, {
            "val": "\'",
            "key": "Single Quote"
        }, {
            "val": "\f",
            "key": "Formfeed (FF)"
        }, {
            "val": "\ooo",
            "key": "Character with octal value "
        }, {
            "val": "\",
            "key": "Double Quote"
        }, {
            "val": "\n",
            "key": "Linefeed "
        }, {
            "val": "\a",
            "key": "Bell"
        }, {
            "val": "\r",
            "key": "Carriage Return"
        }, {
            "val": "\xhh",
            "key": "Char with hex value"
        }, {
            "val": "\b",
            "key": "Backspace"
        }, {
            "val": "\t",
            "key": "Horizontal tab"
        }, {
            "val": "\uxxxx",
            "key": "Character with 16 bit hex value xxxx (Unicode value)"
        }, {
            "val": "\Uxxxxxxxx",
            "key": "Character with 32-bit hex value xxxxxxxx (Unicode value)"
        }, {
            "val": "\N{name}",
            "key": "Character named in the Unicode database (unicode only)"
        }, {
            "val": "\AnyOtherChar",
            "key": "left as-is, including the backslash, e.g. str('\z') == '\\z'"
        }],
        "Operations on String": [{
            "val": "s.capitalize()",
            "key": "Returns a copy of s with its first character capitalized, and the rest of the characters lowercased."
        }, {
            "val": "s.center(width[,fillChar=' '])",
            "key": "Returns a copy of s centered in a string of length width, surrounded by the appropriate number of fillChar characters."
        }, {
            "val": "s.count(sub[, start[,end]])",
            "key": "Returns the number of occurrences of substring sub in string s."
        }, {
            "val": "s.decode([encoding[,errors]])",
            "key": "Returns a unicode string representing the decoded version of str s, using the given codec (encoding). Useful when reading from a file or a I/O function that handles only str. Inverse of encode."
        }, {
            "val": "s.encode([encoding[,errors]])",
            "key": "Returns a str representing an encoded version of s. Mostly used to encode a unicode string to a str in order to print it or write it to a file (since these I/O functions only accept str), e.g. u'légère'.encode ('utf8'). Also used to encode a str to a str, e.g. to zip (codec 'zip') or uuencode (codec 'uu') it. Inverse of decode."
        }, {
            "val": "s.endswith(suffix [,start[, end]])",
            "key": "Returns True if s ends with the specified suffix, otherwise return false."
        }, {
            "val": "s.expandtabs ([tabsize])",
            "key": "Returns a copy of s where all tab characters are expanded using spaces."
        }, {
            "val": "s.find(sub [,start[,end]])",
            "key": "Returns the lowest index in s where substring sub is found. Returns -1 if sub is not found."
        }, {
            "val": "s.format(*args,*kwargs)",
            "key": "Returns s after replacing numeric and named formatting references found in braces {}."
        }, {
            "val": "s.index(sub[, start[,end]])",
            "key": "like find(), but raises ValueError when the substring is not found."
        }, {
            "val": "s.isalnum()",
            "key": "Returns True if all characters in s are alphanumeric, False otherwise."
        }, {
            "val": "s.isalpha()",
            "key": "Returns True if all characters in s are alphabetic, False otherwise."
        }, {
            "val": "s.isdigit()",
            "key": "Returns True if all characters in s are digit characters, False otherwise."
        }, {
            "val": "s.islower()",
            "key": "Returns True if all characters in s are lowercase, False otherwise."
        } , {
            "val": "s.isspace()",
            "key": "Returns True if all characters in s are whitespace characters, False otherwise."
        }, {
            "val": "s.istitle()",
            "key": "Returns True if string s is a titlecased string, False otherwise."
        }, {
            "val": "s.isupper()",
            "key": "Returns True if all characters in s are uppercase, False otherwise."
        }, {
            "val": "seperator.join(seq)",
            "key": "Returns a concatenation of the strings in the sequence seq, separated by string separator, e.g.: ",".join(['A', 'B', 'C']) -> "A,B,C""
        }, {
            "val": "s.ljust/rjust/center (width[, fillChar=' '])",
            "key": "Returns s left/right justified/centered in a string of length width."
        }, {
            "val": "s.lower()",
            "key": "Returns a copy of s converted to lowercase."
        }, {
            "val": "s.lstrip([chars] )",
            "key": "Returns a copy of s with leading chars (default: blank chars) removed."
        }, {
            "val": "s.partition(separ)",
            "key": "Searches for the separator separ in s, and returns a tuple (head, sep,tail) containing the part before it, the separator itself, and the part after it. If the separator is not found, returns (s, '', '')."
        } ,{
            "val": "s.replace(old, new[,maxCount =-1])",
            "key": "Returns a copy of s with the first maxCount (-1: unlimited) occurrences of substring old replaced by new."
        }, {
            "val": "s.rfind(sub[ , start[,end]])",
            "key": "Returns the highest index in s where substring sub is found. Returns -1 if sub is not found."
        }, {
            "val": "s.rindex(sub[ , start[,end]])",
            "key": "like rfind(), but raises ValueError when the substring is not found."
        }, {
            "val": "s.rpartition(separ)",
            "key": "Searches for the separator separ in s, starting at the end of s, and returns a tuple (head, sep, tail) containing the (left) part before it, the separator itself, and the (right) part after it. If the separator is not found, returns ('', '', s)."
        }, {
            "val": "s.rstrip([chars])",
            "key": "Returns a copy of s with trailing chars(default: blank chars) removed, e.g.a Path.rstrip('/') will remove the trailing '/'from aPath if it exists"
        }, {
            "val": "s.split([ separator[,maxsplit]])",
            "key": "Returns a list of the words in s, using separator as the delimiter string."
        }, {
            "val": "s.rsplit([ separator[,maxsplit]])",
            "key": "Same as split, but splits from the end of the string."
        }, {
            "val": "s.splitlines([ keepends])",
            "key": "Returns a list of the lines in s, breaking at line boundaries."
        }, {
            "val": "s.startswith(prefix [,start[, end]])",
            "key": "Returns True if s starts with the specified prefix, otherwise returns False.Negative numbers may be used for start and end. Since 2.5 prefix can also be a tuple of strings to try."
        }, {
            "val": "s.strip([chars])",
            "key": "Returns a copy of s with leading and trailing chars(default: blank chars)removed."
        }, {
            "val": "s.swapcase()",
            "key": "Returns a copy of s with uppercase characters converted to lowercase and vice versa."
        }, {
            "val": "s.title()",
            "key": "Returns a titlecased copy of s, i.e. words start with uppercase characters,all remaining cased characters are lowercase."
        }, {
            "val": "s.translate(table[,deletechars=''])",
            "key": "Returns a copy of s mapped through translation table table. Characters from deletechars are removed from the copy prior to the mapping."
        }, {
            "val": "s.upper()",
            "key": "Returns a copy of s converted to uppercase."
        }, {
            "val": "s.zfill(width)",
            "key": "Returns the numeric string left filled with zeros in a string of length width."
        }],
        "Format codes": [{
            "val": "Change brush size",
            "key": "f"
        }, {
            "val": "Change brush strength",
            "key": "[Shift] [f]"
        }, {
            "val": "Rotate brush texture",
            "key": "[Ctrl] [f]"
        }, {
            "val": "Play/Stop animation",
            "key": "[Alt] [a]"
        }, {
            "val": "Play animation in reverse",
            "key": "[Alt] [Shift] [a]"
        }, {
            "val": "Next frame",
            "key": "→"
        }, {
            "val": "Previous frame",
            "key": "←"
        }, {
            "val": "Forward 10 frames",
            "key": "↑"
        }, {
            "val": "Back 10 frames",
            "key": "↓"
        }, {
            "val": "Jump to start point",
            "key": "[Shift] [←]"
        }, {
            "val": "Jump to end point",
            "key": "[Shift] [→]"
        }, {
            "val": "Scroll through frames",
            "key": "[Alt] [Mouse wheel]"
        }, {
            "val": "Insert keyframe",
            "key": "i"
        }, {
            "val": "Remove keyframe",
            "key": "[Alt] [i]"
        }, {
            "val": "Jump to next keyframe",
            "key": "[Ctrl] [Page up]"
        }, {
            "val": "Jump to previous keyframe",
            "key": "[Ctrl] [Page down]"
        }],
        "Node editor": [{
            "val": "Add node",
            "key": "[Shift] [a]"
        }, {
            "val": "Cut links",
            "key": "[Ctrl] [Left mouse]"
        }, {
            "val": "(Un-)Hide node",
            "key": "h"
        }, {
            "val": "Make group",
            "key": "[Ctrl] [g]"
        }, {
            "val": "Ungroup",
            "key": "[Alt] [g]"
        }, {
            "val": "Edit group",
            "key": "Tab"
        }, {
            "val": "Move background",
            "key": "[Alt] [Middle mouse]"
        }, {
            "val": "Zoom in background",
            "key": "v"
        }, {
            "val": "Zoom out background",
            "key": "[Alt] [v]"
        }, {
            "val": "Properties",
            "key": "n"
        }],
        "Armatures": [{
            "val": "Add bone",
            "key": "[e] or [Ctrl] [Click]"
        }, {
            "val": "Rotate",
            "key": "[Ctrl] [r]"
        }, {
            "val": "Recalculate roll",
            "key": "[Ctrl] [n]"
        }, {
            "val": "Align bones",
            "key": "[Ctrl] [Alt] [a]"
        }, {
            "val": "Move to bone layers",
            "key": "m"
        }, {
            "val": "View bone layers",
            "key": "[Shift] [m]"
        }, {
            "val": "Set bone flag",
            "key": "[Shift] [w]"
        }, {
            "val": "Switch bone direction",
            "key": "[Alt] [f]"
        }, {
            "val": "Scroll hierachy",
            "key": "{\\]} / {\\[}"
        }, {
            "val": "Select hierarchy",
            "key": "[Shift] ({\\]} / {\\[})"
        }, {
            "val": "Select connected",
            "key": "l"
        }],
        "Pose mode": [{
            "val": "Apply pose",
            "key": "[Ctrl] [a]"
        }, {
            "val": "Clear pose rotation",
            "key": "[Alt] [r]"
        }, {
            "val": "Clear pose location",
            "key": "[Alt] [l]"
        }, {
            "val": "Clear pose scale",
            "key": "[Alt] [s]"
        }, {
            "val": "Copy pose",
            "key": "[Ctrl] [c]"
        }, {
            "val": "Paste pose",
            "key": "[Ctrl] [v]"
        }, {
            "val": "Add IK",
            "key": "[Shift] [i]"
        }, {
            "val": "Remove IK",
            "key": "[Ctrl] [Alt] [i]"
        }, {
            "val": "Add to bone group",
            "key": "[Ctrl] [g]"
        }, {
            "val": "Relax pose",
            "key": "[Alt] [e]"
        }],
        "Timeline": [{
            "val": "Set start frame",
            "key": "s"
        }, {
            "val": "Set end frame",
            "key": "e"
        }, {
            "val": "Show all frames",
            "key": "Home"
        }, {
            "val": "Add marker",
            "key": "m"
        }, {
            "val": "Move marker",
            "key": "[Right click \\{drag\\}]"
        }, {
            "val": "Toggle frames/seconds",
            "key": "[Ctrl] [t]"
        }],
        "Video Sequence Editor": [{
            "val": "Next strip",
            "key": "Page up"
        }, {
            "val": "Pervious strip",
            "key": "Page down"
        }, {
            "val": "Split strip",
            "key": "k"
        }, {
            "val": "Lock strip",
            "key": "[Shift] [l]"
        }, {
            "val": "Unlock strip",
            "key": "[Shift] [Alt] [l]"
        }, {
            "val": "Coyp strip",
            "key": "[Ctrl] [c]"
        }, {
            "val": "Paste strip",
            "key": "[Ctrl] [v]"
        }, {
            "val": "Seperate images",
            "key": "y"
        }, {
            "val": "Snap strip to scrubber",
            "key": "[Shift] [s]"
        }],
        "Advanced": [{
            "val": "Append file",
            "key": "[Shift] [F1]"
        }, {
            "val": "Fullscreen mode",
            "key": "[Alt] [F11]"
        }, {
            "val": "Maximize subwindow",
            "key": "[Ctrl] [↑]"
        }, {
            "val": "Change active camera",
            "key": "[Ctrl] [o]"
        }, {
            "val": "Use render buffer",
            "key": "j"
        }, {
            "val": "Only render selected",
            "key": "w"
        }, {
            "val": "Only render portion",
            "key": "[Shift] [b]"
        }, {
            "val": "Save over default scene",
            "key": "[Ctrl] [u]"
        }, {
            "val": "Make screen cast",
            "key": "[Ctrl] [F4]"
        }]
    }
}
