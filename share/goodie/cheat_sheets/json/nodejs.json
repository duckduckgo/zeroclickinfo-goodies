{
    "id": "nodejs_cheat_sheet",
    "name": "NodeJS",
    "description": "An open source, cross-platform runtime environment for server-side and networking applications written in JavaScript",
    "metadata": {
        "sourceName": "GoSquared",
        "sourceUrl": "https://www.gosquared.com/resources/node-cheat-sheet/"
    },
    "aliases": [
        "node js"
    ],
    "template_type": "reference",
    "section_order": [
        "Getting Started",
        "Globals",
        "Stdio",
        "Process",
        "Util",
        "Event Emitter",
        "Net",
        "Events"
    ],
    "sections": {
        "Getting Started": [{
                "key": "node script.js",
                "val": "Run script"
            },{
                "key": "npm install <package>",
                "val": "Install package with npm"
        }],
        "Globals": [{
                "key": "var variable",
                "val": "Initialize local variable to module"
            },{
                "key": "process",
                "val": "Properties and methods for current process"
            },{
                "key": "console",
                "val": "Print out to stdout and stderr"
            },{
                "key": "require()",
                "val": "To require modules"
            },{
                "key": "require.resolve",
                "val": "Lookup location of module"
            },{
                "key": "require.paths",
                "val": "Paths to search for modules"
            },{
                "key": "module",
                "val": "reference to current module"
            },{
                "key": "_filename",
                "val": "Filename of script being executed"
        }],
        "Stdio": [{
                "key": "stdio",
                "val": "Object for printing out to stdout and stderr"
            },{
                "key": "console.log(string)",
                "val": "Print to stdout with new line"
            },{
                "key": "console.error(string)",
                "val": "Print to stderr with new line"
            },{
                "key": "console.error(string)",
                "val": "Print to stderr with new line"
            },{
                "key": "console.time(label)",
                "val": "Set time marker"
            },{
                "key": "console.timeEnd(label)",
                "val": "Finish timer and record output"
            },{
                "key": "console.trace()",
                "val": "Print stack trace"
        }],
        "Process": [{
                "key": "process",
                "val": "Global object. Instance of EventEmitter"
            },{
                "key": "process.on(SIGNAL, callback)",
                "val": "Signal  emitted when process receives a signal"
            },{
                "key": "exit",
                "val": "Process is about to exit"
            },{
                "key": "uncaughtException",
                "val": "Exception bubbled back to event loop"
        }],
        "Util": [{
                "key": "util.debug(message)",
                "val": "Synchronous console.error(message)"
            },{
                "key": "util.log(message)",
                "val": "Print timestamped message to stdout"
        }],
        "Event Emitter": [{
                "key": "events",
                "val": "Callback functions executed when events occur are listeners"
            },{
                "key": "emitter.on(event, listener)",
                "val": "Add a listener for event"
            },{
                "key": "emitter.once(event, listener)",
                "val": "Fire listener once"
            },{
                "key": "emitter.removeListener(event,listener)",
                "val": "Remove a listener"
            },{
                "key": "emitter.removeAllListeners(event)",
                "val": "Remove all listeners"
            },{
                "key": "emitter.emit(event, [[arg1], [arg2], [...]])",
                "val": "Execute listeners for this event with supplied args"
        }],
        "Net": [{
                "key": "net",
                "val": "Asynchronous network wrapper for creating streams"
            },{
                "key": "server.listenFD(fd)",
                "val": "Listen on file descriptor fd"
            },{
                "key": "server.close()",
                "val": "Stop accepting new connections"
            },{
                "key": "socket.bufferSize",
                "val": "Number of characters in internal write buffer"
            },{
                "key": "socket.end()",
                "val": "Send FIN packet"
            },{
                "key": "socket.pause()",
                "val": "Pause reading of data"
        }],
        "Events": [{
                "key": "connect",
                "val": "Socket connection established"
            },{
                "key": "end",
                "val": "Other end of socket sent FIN packet"
            },{
                "key": "data",
                "val": "Data is received"
            },{
                "key": "timeout",
                "val": "Timed out from inactivity"
            },{
                "key": "drain",
                "val": "Write buffer has become empty"
            },{
                "key": "error",
                "val": "Error has occurred. close event emitted after"
            },{
                "key": "close",
                "val": "Socket fully closed"
            }
        ]
    }
}